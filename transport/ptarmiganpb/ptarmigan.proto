syntax = "proto3";
package ptarmiganpb;
option go_package = "github.com/jrife/ptarmigan/transport/ptarmiganpb";

// Model definitions only here (to be used by other transports)
import "github.com/coreos/etcd/raft/raftpb/raft.proto";
import "gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = false;
option (gogoproto.goproto_enum_prefix_all) = false;

message Error {
    enum ErrorCode {
        ErrNotFound = 0;
    }

    // Code must be one of the standard error codes
    ErrorCode code = 1;
    // Type can be used by a specific service to further discover what went wrong
    string type = 2;
    // Message can carry more detail on what the problem is
    string message = 3;
}

message Chunk {
    oneof chunk_data {
        bytes data = 1;
        raftpb.Snapshot metadata = 2;
    }
}

// Declarative object model for
// describing deployments.
// - Storage Class: The category of storage.
// - Storage Host: The actual hosts providing one or more storage classes.
//   Storage hosts add themselves to this collection when they start up. The master controller will
//   further decide when to schedule things on this host.
//   Graceful deletion of a storage host results in rearrangement of replicas
//   Forced deletion results in the addition of replicas to meet replication requirements
//   for affected stores.
// - Store: A collection of partitions with the same replication settings.
//   Users create stores through the tooling. Creation of a store does not result in any action.
//   Editing a store, like changing the replication factor, results in coordination that changes the number
//   of replicas of all partitions of this store.
//   Deleting a store results in deletion of all partitions of this store.
// - Partition: A slice of a store identified by a partition name that shares the same replication settings as other partitions in the store.
//   Users create partitions through the tooling. Creation of a partition results in one or more replicas being created
//   Deletion of a partition results in the deletion of its replicas
//   Partitions cannot be edited directly. The parent store can be adjusted though.
// - Replica: A replica of a partition that is hosted on a storage host that supports its storage class.
//   Replicas aren't directly created or deleted by users
// - RaftGroup: A group of raft replicas powering a partition
//   Creation of a raft group results in the creation of multiple raft replicas
// - RaftReplica: A raft replica inside a raft group. Tied to a replica
//
// Internal vs External storage classes
// Raft Groups, Partitions, and Storage Hosts. Their relationships and similarities.
message ObjectMetadata {
    string name = 1;
    map<string, string> labels = 2;
}

message StorageClass {
    ObjectMetadata metadata = 1;
    StorageClassSpec spec = 2;
    StorageClassStatus status = 3;
}

message StorageClassSpec {
}

message StorageClassStatus {
}

message StorageHost {
    ObjectMetadata metadata = 1;
    StorageHostSpec spec = 2;
    StorageHostStatus status = 3;
}

message StorageHostSpec {
    repeated string storage_classes = 1;
    bool raft_host = 2;
    string availability_zone = 3;
}

message StorageHostStatus {
}

message Store {
    ObjectMetadata metadata = 1;
    StoreSpec spec = 2;
    StoreStatus status = 3;
}

message StoreSpec {
    string storage_class = 1;
    uint32 replication_factor = 2;
}

message StoreStatus {
}

message Partition {
    ObjectMetadata metadata = 1;
    PartitionSpec spec = 2;
    PartitionStatus status = 3;
}

message PartitionSpec {
    string store = 2;
    string raft_group = 3;
    uint32 replication_factor = 4;
}

message PartitionStatus {
}

message Replica {
    ObjectMetadata metadata = 1;
    ReplicaSpec spec = 2;
    ReplicaStatus status = 3;
}

message ReplicaSpec {
    string partition = 1;
    string raft_group_replica = 2;
    string storage_host = 3;
}

message ReplicaStatus {
}

message RaftGroup {
    ObjectMetadata metadata = 1;
    RaftGroupSpec spec = 2;
    RaftGroupStatus status = 3;
}

message RaftGroupSpec {
    string partition = 1;
    uint32 replication_factor = 2;
}

message RaftGroupStatus {
}

message RaftGroupReplica {
    ObjectMetadata metadata = 1;
    RaftGroupReplicaSpec spec = 2;
    RaftGroupReplicaStatus status = 3;
}

message RaftGroupReplicaSpec {
    string raft_group = 1;
    string replica = 2;
    string storage_host = 3;
}

message RaftGroupReplicaStatus {
}


// 1:1 relationships -> both objects have references
// 1:N relationships -> child references parent
// ObjectMetadata.Name is globally unique per collection.
// Concatenate parent names to make child entities unique