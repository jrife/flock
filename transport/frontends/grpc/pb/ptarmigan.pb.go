// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ptarmigan.proto

package pb

import (
	context "context"
	fmt "fmt"
	raftpb "github.com/coreos/etcd/raft/raftpb"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	ptarmiganpb "github.com/jrife/ptarmigan/transport/ptarmiganpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RaftMessages struct {
	Messages []raftpb.Message `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages"`
}

func (m *RaftMessages) Reset()         { *m = RaftMessages{} }
func (m *RaftMessages) String() string { return proto.CompactTextString(m) }
func (*RaftMessages) ProtoMessage()    {}
func (*RaftMessages) Descriptor() ([]byte, []int) {
	return fileDescriptor_92c36b33a96ae4b7, []int{0}
}
func (m *RaftMessages) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RaftMessages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RaftMessages.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RaftMessages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftMessages.Merge(m, src)
}
func (m *RaftMessages) XXX_Size() int {
	return m.Size()
}
func (m *RaftMessages) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftMessages.DiscardUnknown(m)
}

var xxx_messageInfo_RaftMessages proto.InternalMessageInfo

type Empty struct {
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_92c36b33a96ae4b7, []int{1}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return m.Size()
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*RaftMessages)(nil), "pb.RaftMessages")
	proto.RegisterType((*Empty)(nil), "pb.Empty")
}

func init() { proto.RegisterFile("ptarmigan.proto", fileDescriptor_92c36b33a96ae4b7) }

var fileDescriptor_92c36b33a96ae4b7 = []byte{
	// 270 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x4f, 0x4b, 0x4e, 0xc3, 0x30,
	0x10, 0x75, 0xa0, 0xfc, 0x4c, 0x51, 0x91, 0xc5, 0x02, 0x65, 0x61, 0xaa, 0x4a, 0x48, 0x95, 0x10,
	0x36, 0x94, 0x13, 0xb4, 0x88, 0x25, 0x9b, 0xf6, 0x04, 0x76, 0xeb, 0x26, 0x15, 0x24, 0x1e, 0xd9,
	0xd3, 0x45, 0x6f, 0xc1, 0xb1, 0xb2, 0xcc, 0x92, 0x15, 0xa2, 0xc9, 0x45, 0x50, 0x92, 0x2a, 0x8a,
	0xd8, 0xcc, 0x3c, 0xcd, 0xbc, 0xf7, 0xe6, 0x0d, 0x1d, 0x00, 0x2a, 0x97, 0x6c, 0x22, 0x95, 0x0a,
	0x70, 0x16, 0x2d, 0x3b, 0x02, 0x1d, 0x3e, 0x46, 0x1b, 0x8c, 0xb7, 0x5a, 0x2c, 0x6d, 0x22, 0x97,
	0xd6, 0x19, 0xeb, 0xa5, 0xc1, 0xe5, 0x4a, 0x3a, 0xb5, 0xc6, 0xba, 0x80, 0xae, 0x5b, 0x23, 0x09,
	0xef, 0xd1, 0xa9, 0xd4, 0x83, 0x75, 0x28, 0x5b, 0x37, 0xd0, 0xf2, 0x9f, 0x73, 0x78, 0x13, 0xd9,
	0xc8, 0xd6, 0x50, 0x56, 0xa8, 0x99, 0x8e, 0xa6, 0xb4, 0x3f, 0x57, 0x6b, 0x7c, 0x37, 0xde, 0xab,
	0xc8, 0x78, 0xf6, 0x4c, 0xcf, 0x93, 0x03, 0xbe, 0x0d, 0x86, 0xc7, 0xe3, 0xcb, 0xc9, 0x40, 0x34,
	0x27, 0xc5, 0x81, 0x33, 0xeb, 0x65, 0x3f, 0x77, 0x64, 0xde, 0xd2, 0x46, 0x67, 0xf4, 0xe4, 0x2d,
	0x01, 0xdc, 0x4d, 0x0c, 0xed, 0x55, 0x5e, 0xec, 0x89, 0x5e, 0x4d, 0x01, 0x3e, 0x77, 0x8b, 0x54,
	0x81, 0x8f, 0x2d, 0x32, 0x26, 0x3a, 0xc1, 0xc4, 0x6b, 0xbc, 0x4d, 0x3f, 0xc2, 0x0b, 0x01, 0x5a,
	0xd4, 0xba, 0x71, 0xc0, 0x1e, 0x68, 0x7f, 0x61, 0xd2, 0x55, 0x9b, 0xe2, 0xba, 0x5a, 0x76, 0x73,
	0x75, 0xe8, 0xb3, 0x61, 0xb6, 0xe7, 0x24, 0xdf, 0x73, 0x92, 0x15, 0x3c, 0xc8, 0x0b, 0x1e, 0xfc,
	0x16, 0x3c, 0xf8, 0x2a, 0x39, 0xc9, 0x4b, 0x4e, 0xbe, 0x4b, 0x4e, 0xf4, 0x69, 0xfd, 0xdb, 0xcb,
	0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x09, 0x7c, 0xe4, 0xc9, 0x5e, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RaftClient is the client API for Raft service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RaftClient interface {
	ApplySnapshot(ctx context.Context, opts ...grpc.CallOption) (Raft_ApplySnapshotClient, error)
	SendMessages(ctx context.Context, in *RaftMessages, opts ...grpc.CallOption) (*Empty, error)
}

type raftClient struct {
	cc *grpc.ClientConn
}

func NewRaftClient(cc *grpc.ClientConn) RaftClient {
	return &raftClient{cc}
}

func (c *raftClient) ApplySnapshot(ctx context.Context, opts ...grpc.CallOption) (Raft_ApplySnapshotClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Raft_serviceDesc.Streams[0], "/pb.Raft/ApplySnapshot", opts...)
	if err != nil {
		return nil, err
	}
	x := &raftApplySnapshotClient{stream}
	return x, nil
}

type Raft_ApplySnapshotClient interface {
	Send(*ptarmiganpb.Chunk) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type raftApplySnapshotClient struct {
	grpc.ClientStream
}

func (x *raftApplySnapshotClient) Send(m *ptarmiganpb.Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *raftApplySnapshotClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *raftClient) SendMessages(ctx context.Context, in *RaftMessages, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.Raft/SendMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaftServer is the server API for Raft service.
type RaftServer interface {
	ApplySnapshot(Raft_ApplySnapshotServer) error
	SendMessages(context.Context, *RaftMessages) (*Empty, error)
}

// UnimplementedRaftServer can be embedded to have forward compatible implementations.
type UnimplementedRaftServer struct {
}

func (*UnimplementedRaftServer) ApplySnapshot(srv Raft_ApplySnapshotServer) error {
	return status.Errorf(codes.Unimplemented, "method ApplySnapshot not implemented")
}
func (*UnimplementedRaftServer) SendMessages(ctx context.Context, req *RaftMessages) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessages not implemented")
}

func RegisterRaftServer(s *grpc.Server, srv RaftServer) {
	s.RegisterService(&_Raft_serviceDesc, srv)
}

func _Raft_ApplySnapshot_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RaftServer).ApplySnapshot(&raftApplySnapshotServer{stream})
}

type Raft_ApplySnapshotServer interface {
	SendAndClose(*Empty) error
	Recv() (*ptarmiganpb.Chunk, error)
	grpc.ServerStream
}

type raftApplySnapshotServer struct {
	grpc.ServerStream
}

func (x *raftApplySnapshotServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *raftApplySnapshotServer) Recv() (*ptarmiganpb.Chunk, error) {
	m := new(ptarmiganpb.Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Raft_SendMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaftMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).SendMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Raft/SendMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).SendMessages(ctx, req.(*RaftMessages))
	}
	return interceptor(ctx, in, info, handler)
}

var _Raft_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Raft",
	HandlerType: (*RaftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessages",
			Handler:    _Raft_SendMessages_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ApplySnapshot",
			Handler:       _Raft_ApplySnapshot_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "ptarmigan.proto",
}

func (m *RaftMessages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftMessages) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RaftMessages) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for iNdEx := len(m.Messages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Messages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPtarmigan(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Empty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintPtarmigan(dAtA []byte, offset int, v uint64) int {
	offset -= sovPtarmigan(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RaftMessages) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovPtarmigan(uint64(l))
		}
	}
	return n
}

func (m *Empty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovPtarmigan(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPtarmigan(x uint64) (n int) {
	return sovPtarmigan(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RaftMessages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPtarmigan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftMessages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftMessages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPtarmigan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPtarmigan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPtarmigan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, raftpb.Message{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPtarmigan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPtarmigan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPtarmigan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPtarmigan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPtarmigan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPtarmigan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPtarmigan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPtarmigan(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPtarmigan
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPtarmigan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPtarmigan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPtarmigan
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPtarmigan
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPtarmigan
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPtarmigan        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPtarmigan          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPtarmigan = fmt.Errorf("proto: unexpected end of group")
)
